/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.minisumo.graphic.drive;

import java.util.Collection;
import java.util.logging.Logger;
import net.minisumo.world.AbstractRobot;
import net.minisumo.world.JElement;
import org.openide.util.LookupEvent;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupListener;
import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//net.minisumo.graphic.drive//Drive//EN",
autostore = false)
@TopComponent.Description(preferredID = "DriveTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "net.minisumo.graphic.drive.DriveTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_DriveAction",
preferredID = "DriveTopComponent")
public final class DriveTopComponent extends TopComponent implements LookupListener {

    static final Logger logger = Logger.getLogger(DriveTopComponent.class.getName());
    private Lookup.Result result = null;
    private AbstractRobot robot;
    
    private Drive drive;

    public DriveTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(DriveTopComponent.class, "CTL_DriveTopComponent"));
        setToolTipText(NbBundle.getMessage(DriveTopComponent.class, "HINT_DriveTopComponent"));
//        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);
        setFocusable(true);
        drive = new Drive();
        add(drive);
        addKeyListener(drive);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        result = Utilities.actionsGlobalContext().lookupResult(JElement.class);
        result.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
        result = null;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent lookupEvent) {
        Lookup.Result r = (Lookup.Result) lookupEvent.getSource();
        Collection c = r.allInstances();
        if (!c.isEmpty()) {
            Object obj = c.iterator().next();
            if (obj instanceof AbstractRobot) {
                robot = (AbstractRobot) obj;
                drive.setRobot(robot);
//                if (robot != null) {
//                    drive.setRobot(robot);
//                    robot.removePropertyChangeListener(this);
//                }
//                robot.addPropertyChangeListener(this);
//                setConfig();
            }
        }
    }
}
