/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.minisumo.serial.graphic;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import net.minisumo.serial.EventJpacket;
import net.minisumo.serial.EventJpacketListener;
import net.minisumo.serial.XBeeAPI;
import net.minisumo.serial.packet.Jpacket;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//net.minisumo.serial.graphic//XBeeControl//EN",
autostore = false)
@TopComponent.Description(preferredID = "XBeeControlTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "net.minisumo.serial.graphic.XBeeControlTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_XBeeControlAction",
preferredID = "XBeeControlTopComponent")
public final class XBeeControlTopComponent extends TopComponent implements PropertyChangeListener, EventJpacketListener {

    private JLabel panelInformation;
    private JPanel panel;
    private XBeeAPI xbee;
    private SendPacket packet;

    public XBeeControlTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(XBeeControlTopComponent.class, "CTL_XBeeControlTopComponent"));
//        setToolTipText(NbBundle.getMessage(XBeeControlTopComponent.class, "HINT_XBeeControlTopComponent"));
        panelInformation = new JLabel("Panel Information");
        add(panelInformation, BorderLayout.NORTH);
        textArea = new JTextArea();
        textArea.setEditable(false);
        JScrollPane pane = new JScrollPane(textArea);
        pane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        textArea.setLineWrap(true);
        textArea.setAutoscrolls(true);
        pane.setAutoscrolls(true);
        add(pane, BorderLayout.CENTER);
        panel = new JPanel(new GridLayout(1, 2));
        add(panel, BorderLayout.SOUTH);
        packet = new SendPacket();
        panel.add(packet);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();

        setLayout(new java.awt.BorderLayout(0, 10));

        textArea.setColumns(20);
        textArea.setEditable(false);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        xbee = Lookup.getDefault().lookup(XBeeAPI.class);
        xbee.addPropertyChangeListener(this);
        if(xbee.isConnect()){
            XBeeAPI.getReader().addEventJpacketListener(this);
        }
    }

    @Override
    public void componentClosed() {
        xbee.removePropertyChangeListener(this);
        xbee = null;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getSource() == xbee) {
            if (evt.getPropertyName().equals(XBeeAPI.PROP_CONNECT)) {
                if ((Boolean) evt.getNewValue()) {
                    XBeeAPI.getReader().addEventJpacketListener(this);
                } else {
                    XBeeAPI.getReader().removeEventJpacketListener(this);
                }
            }
        }
    }

    @Override
    public void eventJpacketOccurred(EventJpacket evt) {
        Jpacket sourcePacket = evt.getSource();
        textArea.append(sourcePacket.toString() + "\n");
        textArea.setCaretPosition(textArea.getDocument().getLength());
    }
}
